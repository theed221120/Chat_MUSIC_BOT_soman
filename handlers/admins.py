from asyncio import QueueEmpty

from pyrogram import Client
from pyrogram.types import Message, Chat

from callsmusic import callsmusic, queues

from helpers.filters import command
from helpers.decorators import errors, authorized_users_only


@Client.on_message(command(["pause", "p"]))
@errors
@authorized_users_only
async def pause(_, message: Message):
    if callsmusic.pause(message.chat.id):
        await message.reply_text("โธ เดคเดฒเตโเดเตเดเดพเดฒเดคเตเดคเตเดเตเดเต เดชเดพเดเตเดเต เดจเดฟเตผเดคเตเดคเดฟ")
    else:
        await message.reply_text("โ๏ธ เดเดจเตเดจเตเด เดชเดพเดเตเดจเตเดจเดฟเดฒเตเดฒ")


@Client.on_message(command(["resume", "r"]))
@errors
@authorized_users_only
async def resume(_, message: Message):
    if callsmusic.resume(message.chat.id):
        await message.reply_text("๐ง เดชเดพเดเตเดเต เดตเตเดฃเตเดเตเด เดเดฐเดเดญเดฟเดเตเดเตเดจเตเดจเต เดเดฒเตเดฒเดพเดฐเตเด Dance เดเดณเดฟ ๐บ")
    else:
        await message.reply_text("โ๏ธเดเดฑเตเดฑ เดชเดพเดเตเดเตเด pause เดเตเดฏเตเดคเดฟเดเตเดเดฟเดฒเตเดฒ")


@Client.on_message(command(["stop", "s"]))
@errors
@authorized_users_only
async def stop(_, message: Message):
    if message.chat.id not in callsmusic.active_chats:
        await message.reply_text("โ๏ธ เดเดจเตเดจเตเด เดชเดพเดเตเดจเตเดจเดฟเดฒเตเดฒ")
    else:
        try:
            queues.clear(message.chat.id)
        except QueueEmpty:
            pass

        await callsmusic.stop(message.chat.id)
        await message.reply_text("โ เดชเดพเดเตเดเต เดจเดฟเตผเดคเตเดคเดฟ เดเดฒเตเดฒเดพเด เดเตเดเดฟ เดเดเตเดคเตเดคเต เดเดฃเตเดเดคเตเดคเดฟเดฒเตโ เดเดฑเดฟเดเตเดเดฟเดเตเดเตเดฃเตเดเต ๐ฌ and left the Voice Chat!")


@Client.on_message(command(["skip", "f"]))
@errors
@authorized_users_only
async def skip(_, message: Message):
    if message.chat.id not in callsmusic.active_chats:
        await message.reply_text("โ๏ธ เดเดจเตเดจเตเด เดชเดพเดเตเดจเตเดจเดฟเดฒเตเดฒ")
    else:
        queues.task_done(message.chat.id)

        if queues.is_empty(message.chat.id):
            await callsmusic.stop(message.chat.id)
        else:
            await callsmusic.set_stream(
                message.chat.id, queues.get(message.chat.id)["file"]
            )

        await message.reply_text("เดเดเตเดคเตเดค เดชเดพเดเตเดเต เดเดเตเดเดฟเดเตเดเตเดฃเตเดเต!")


@Client.on_message(command(["mute", "m"]))
@errors
@authorized_users_only
async def mute(_, message: Message):
    result = callsmusic.mute(message.chat.id)

    if result == 0:
        await message.reply_text("๐ เดตเดพเดฏ เดเดเตเดชเตเดชเดฟเดเตเดเต๐ ")
    elif result == 1:
        await message.reply_text("๐ เดเดพเตป เดตเดพเดฏ เดฎเตเดเดฟ เดเดฐเดฟเดเตเดเตเดเดฏเดพเดฃเต เดชเตเดเตเดเดพ ๐")
    elif result == 2:
        await message.reply_text("โ๏ธ Voice chat เดเดฒเต เดคเดจเตเดจเต เดเดฒเตเดฒเตเดเต เดชเตเดเตเดเดพ ๐ฌ")


@Client.on_message(command(["unmute", "u"]))
@errors
@authorized_users_only
async def unmute(_, message: Message):
    result = callsmusic.unmute(message.chat.id)

    if result == 0:
        await message.reply_text("๐ เดตเดพเดฏ เดคเตเดฑเดชเตเดชเดฟเดเตเดเต ๐")
    elif result == 1:
        await message.reply_text("๐ เดเดพเตป เดเดชเตเดชเดดเต เดตเดพเดฏ เดคเตเดฑเดจเตเดจเต ๐คฃ เดจเต เดถเดถเดฟ เดเดฏเดฟ ๐คฃ")
    elif result == 2:
        await message.reply_text("โ๏ธ Voice chat เดเดฒเต เดคเดจเตเดจเต เดเดฒเตเดฒเตเดเต เดชเตเดเตเดเดพ ๐ฌ")
